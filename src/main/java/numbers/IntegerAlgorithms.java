package numbers;

import java.util.HashSet;
import java.util.Set;

public class IntegerAlgorithms {

  /**
   * If we list all the natural numbers below 10 that are multiples of 3 or 5,
   * we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all
   * the multiples of 3 or 5 below 1000.
   */
  public static int findSumOfMultiplesOfNumbers(int[] numbers, int target) {
    int sum = 0;
    Set<Integer> computed = new HashSet<>();
    for (int i = 1; i < target; i++) {
      for (int j = 0; j < numbers.length; j++) {
        if (!computed.contains(i) && i % numbers[j] == 0) {
          computed.add(i);
          sum += i;
        }
      }
    }
    return sum;
  }

  /**
   * Each new term in the Fibonacci sequence is generated by adding the previous
   * two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3,
   * 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci
   * sequence whose values do not exceed four million, find the sum of the
   * even-valued terms. ;) Even number is an integer which is "evenly divisible"
   * by two
   */
  public static long findSumOfFiboEvenNumbers(int maxFiboEligible) {
    long sum = 0;
    int previous = 0;
    int currentFibo = 1;
    while (currentFibo < maxFiboEligible) {
      
      if (currentFibo % 2 == 0) {
        sum += currentFibo;
      }
      int tempCurrentFibo = currentFibo;
      currentFibo = currentFibo + previous;
      previous = tempCurrentFibo;
    }
    return sum;
  }

}